# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from qt5_ros_melodic_gui/log.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class log(genpy.Message):
  _md5sum = "84bb702d12a81cea3fad2de56983aa3d"
  _type = "qt5_ros_melodic_gui/log"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool autoflight_mode
int8 mission
time gps_time
float64 latitude
float64 longitude
float64 altitude

"""
  __slots__ = ['autoflight_mode','mission','gps_time','latitude','longitude','altitude']
  _slot_types = ['bool','int8','time','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       autoflight_mode,mission,gps_time,latitude,longitude,altitude

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(log, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.autoflight_mode is None:
        self.autoflight_mode = False
      if self.mission is None:
        self.mission = 0
      if self.gps_time is None:
        self.gps_time = genpy.Time()
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
    else:
      self.autoflight_mode = False
      self.mission = 0
      self.gps_time = genpy.Time()
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bb2I3d().pack(_x.autoflight_mode, _x.mission, _x.gps_time.secs, _x.gps_time.nsecs, _x.latitude, _x.longitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gps_time is None:
        self.gps_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.autoflight_mode, _x.mission, _x.gps_time.secs, _x.gps_time.nsecs, _x.latitude, _x.longitude, _x.altitude,) = _get_struct_Bb2I3d().unpack(str[start:end])
      self.autoflight_mode = bool(self.autoflight_mode)
      self.gps_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bb2I3d().pack(_x.autoflight_mode, _x.mission, _x.gps_time.secs, _x.gps_time.nsecs, _x.latitude, _x.longitude, _x.altitude))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.gps_time is None:
        self.gps_time = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 34
      (_x.autoflight_mode, _x.mission, _x.gps_time.secs, _x.gps_time.nsecs, _x.latitude, _x.longitude, _x.altitude,) = _get_struct_Bb2I3d().unpack(str[start:end])
      self.autoflight_mode = bool(self.autoflight_mode)
      self.gps_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bb2I3d = None
def _get_struct_Bb2I3d():
    global _struct_Bb2I3d
    if _struct_Bb2I3d is None:
        _struct_Bb2I3d = struct.Struct("<Bb2I3d")
    return _struct_Bb2I3d
