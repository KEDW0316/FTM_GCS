// Generated by gencpp from file qt5_ros_melodic_gui/log.msg
// DO NOT EDIT!


#ifndef QT5_ROS_MELODIC_GUI_MESSAGE_LOG_H
#define QT5_ROS_MELODIC_GUI_MESSAGE_LOG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace qt5_ros_melodic_gui
{
template <class ContainerAllocator>
struct log_
{
  typedef log_<ContainerAllocator> Type;

  log_()
    : autoflight_mode(false)
    , mission(0)
    , gps_time()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
    }
  log_(const ContainerAllocator& _alloc)
    : autoflight_mode(false)
    , mission(0)
    , gps_time()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _autoflight_mode_type;
  _autoflight_mode_type autoflight_mode;

   typedef int8_t _mission_type;
  _mission_type mission;

   typedef ros::Time _gps_time_type;
  _gps_time_type gps_time;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::qt5_ros_melodic_gui::log_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::qt5_ros_melodic_gui::log_<ContainerAllocator> const> ConstPtr;

}; // struct log_

typedef ::qt5_ros_melodic_gui::log_<std::allocator<void> > log;

typedef boost::shared_ptr< ::qt5_ros_melodic_gui::log > logPtr;
typedef boost::shared_ptr< ::qt5_ros_melodic_gui::log const> logConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::qt5_ros_melodic_gui::log_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::qt5_ros_melodic_gui::log_<ContainerAllocator1> & lhs, const ::qt5_ros_melodic_gui::log_<ContainerAllocator2> & rhs)
{
  return lhs.autoflight_mode == rhs.autoflight_mode &&
    lhs.mission == rhs.mission &&
    lhs.gps_time == rhs.gps_time &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::qt5_ros_melodic_gui::log_<ContainerAllocator1> & lhs, const ::qt5_ros_melodic_gui::log_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace qt5_ros_melodic_gui

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::qt5_ros_melodic_gui::log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::qt5_ros_melodic_gui::log_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::qt5_ros_melodic_gui::log_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84bb702d12a81cea3fad2de56983aa3d";
  }

  static const char* value(const ::qt5_ros_melodic_gui::log_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84bb702d12a81ceaULL;
  static const uint64_t static_value2 = 0x3fad2de56983aa3dULL;
};

template<class ContainerAllocator>
struct DataType< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "qt5_ros_melodic_gui/log";
  }

  static const char* value(const ::qt5_ros_melodic_gui::log_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool autoflight_mode\n"
"int8 mission\n"
"time gps_time\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"\n"
;
  }

  static const char* value(const ::qt5_ros_melodic_gui::log_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.autoflight_mode);
      stream.next(m.mission);
      stream.next(m.gps_time);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct log_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::qt5_ros_melodic_gui::log_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::qt5_ros_melodic_gui::log_<ContainerAllocator>& v)
  {
    s << indent << "autoflight_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autoflight_mode);
    s << indent << "mission: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mission);
    s << indent << "gps_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.gps_time);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // QT5_ROS_MELODIC_GUI_MESSAGE_LOG_H
